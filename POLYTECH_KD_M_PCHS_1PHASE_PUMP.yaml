# For ESPHome platform (ESP32)
# Framework: Esp-idf
# Water Pressure Controller PID/PI KD-M-PchS (Polytech)
#
# Для контроллера давления КД-М-ПЧс-*-1М-* компании ПолиТех
# www.pumpcontroller.ru
#
# 1М - максимальное давление 1 МПа
# 2М - максимальное давление 2 МПа
# 4М - максимальное давление 4 МПа
#
# Режим работы с однофазным насосом и дополнительным реле
#
# 1-Phase pump motor and MPa mode

uart:
  - id: uart_modbus_client
    tx_pin: 16
    rx_pin: 17
    baud_rate: 38400 # default = 9600
    stop_bits: 1
    parity: EVEN
    #enable debug UART
    debug: 

modbus:
  - uart_id: uart_modbus_client
    id: modbus_client

modbus_controller:
  - id: KD_M_PCHS
    modbus_id: modbus_client
    address: 10
    setup_priority: -10
    update_interval: 10s

sensor:
  - platform: modbus_controller
    modbus_controller_id: KD_M_PCHS
    name: "Current Pressure"
    address: 1099
    register_type: holding
    value_type: FP32_R
    accuracy_decimals: 2
    unit_of_measurement: "MPa"
    device_class: pressure
   
  - platform: modbus_controller
    name: "Current Power"
    address: 1101
    register_type: holding
    value_type: FP32_R
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: power_factor
 
  - platform: modbus_controller
    name: "Total Water Consuption"
    address: 1103
    register_type: holding
    value_type: FP32_R
    accuracy_decimals: 1
    unit_of_measurement: "L"
    device_class: water

  - platform: modbus_controller
    name: "Instant Water Flow"
    address: 1105
    register_type: holding
    value_type: FP32_R
    accuracy_decimals: 1
    unit_of_measurement: "L/min"
    device_class: volume_flow_rate
    
  - platform: modbus_controller
    name: "Total Pump Working Time"
    address: 1107
    register_type: holding
    value_type: U_DWORD_R
    unit_of_measurement: Min

  - platform: modbus_controller
    name: "Error Code"
    address: 1111
    register_type: holding
    value_type: U_DWORD_R

binary_sensor:
  - platform: modbus_controller
    name: "Leakage"
    address: 1109
    register_type: holding
    bitmask: 0x01 #(Bit 1)

  - platform: modbus_controller
    name: "Pump ON"
    address: 1110
    register_type: holding
    bitmask: 0x01 #(Bit 1)

number:
  - platform: modbus_controller
    name: "Consumption Sensor Clicks"
    address: 1003
    value_type: U_DWORD_R
    min_value: 0
    max_value: 999
    step: 1
    mode: BOX
    skip_updates: 30

  - platform: modbus_controller
    name: "Pressure MIN"
    address: 1006
    value_type: FP32_R
    min_value: 0.00
    max_value: 0.99 # 1.99 for 2M, 3.99 for 4M models
    step: 0.01
    mode: BOX
    unit_of_measurement: "MPa"
  
  - platform: modbus_controller
    name: "Pressure MAX"
    address: 1008
    value_type: FP32_R
    min_value: 0.01
    max_value: 1.00 # 2.00 for 2M, 4.00 for 4M models
    step: 0.01
    mode: BOX
    unit_of_measurement: "MPa"

  - platform: modbus_controller
    name: "Low Pressure Response Time"
    address: 1010
    value_type: U_DWORD_R
    min_value: 0
    max_value: 999
    step: 1
    mode: BOX
    unit_of_measurement: Sec

  - platform: modbus_controller
    name: "Pump MIN Working Time"
    address: 1012
    value_type: U_DWORD_R
    min_value: 0
    max_value: 60
    step: 1
    unit_of_measurement: Sec
    mode: BOX

  - platform: modbus_controller
    name: "Pump MAX Working Time"
    address: 1014
    value_type: U_DWORD_R
    min_value: 0
    max_value: 999
    step: 1
    unit_of_measurement: Min
    mode: BOX

  - platform: modbus_controller
    name: "User Pressure Zero Point"
    address: 1016
    value_type: FP32_R
    min_value: 0.00
    max_value: 1.20
    step: 0.01
    mode: BOX

  - platform: modbus_controller
    name: "User Pressure Correction Coefficient"
    address: 1018
    value_type: FP32_R
    min_value: 0.00
    max_value: 10.0
    step: 0.01
    mode: BOX

select:
  - platform: modbus_controller
    name: "Leakage Sensor"
    address: 1001
    value_type: U_WORD
    optionsmap:
      "Not Exists": 0
      "Exists": 1

  - platform: modbus_controller
    name: "Consumption Sensor Type"
    address: 1002
    value_type: U_WORD
    optionsmap:
      "Digital": 0
      "Relay": 1
      "OFF": 2

  - platform: modbus_controller
    name: "Control Mode"
    address: 1005
    value_type: U_WORD
    optionsmap:
      "PI": 0
      "PID": 1
      "Lin": 2
      "Fill": 3
      "OFF": 4

  - platform: modbus_controller
    name: "Backlight Mode"
    address: 1023
    value_type: U_WORD
    optionsmap:
      "Permanent": 0
      "1 Min": 1
      "5 Min": 2

  - platform: modbus_controller
    name: "Relay 2 Mode"
    address: 1036
    value_type: U_WORD
    optionsmap:
      "OFF": 0
      "Alarm": 1
      "Low": 2
      "High": 3
      "Second Pump": 4
      "First Pump": 5

button:
  - platform: template
    name: "Write settings to EEPROM"
    on_press:
      then:
        - lambda: |-
            // Write settings to EEPROM
            esphome::modbus_controller::ModbusController *controller = id(KD_M_PCHS);
            esphome::modbus_controller::ModbusCommandItem write_to_eeprom =
                esphome::modbus_controller::ModbusCommandItem::create_write_single_command(controller, 0x0577, 0x0001);
            delay(200);
            controller->queue_command(write_to_eeprom);
            ESP_LOGI("ModbusLambda", "Write settings to EEPROM button pressed");

  - platform: template
    name: "Read settings from EEPROM"
    on_press:
      then:
        - lambda: |-
            // Write settings to EEPROM
            esphome::modbus_controller::ModbusController *controller = id(KD_M_PCHS);
            esphome::modbus_controller::ModbusCommandItem read_from_eeprom =
                esphome::modbus_controller::ModbusCommandItem::create_write_single_command(controller, 0x0578, 0x0001);
            delay(200);
            controller->queue_command(read_from_eeprom);
            ESP_LOGI("ModbusLambda", "Read settings from EEPROM button pressed");

  - platform: template
    name: "Reboot device"
    on_press:
      then:
        - lambda: |-
            // Reboot device
            esphome::modbus_controller::ModbusController *controller = id(KD_M_PCHS);
            esphome::modbus_controller::ModbusCommandItem reboot_device =
                esphome::modbus_controller::ModbusCommandItem::create_write_single_command(controller, 0x057A, 0x0001);
            delay(200);
            controller->queue_command(reboot_device);
            ESP_LOGI("ModbusLambda", "Reboot device button pressed");

  - platform: template
    name: "Reset error Button"
    on_press:
      then:
        - lambda: |-
            // Reset error code
            std::vector<uint16_t> clear_error_code = {
              0x0000,       // 1111 Clear error code
              0x0000,       // 1112 
            };
            esphome::modbus_controller::ModbusController *controller = id(KD_M_PCHS);
            esphome::modbus_controller::ModbusCommandItem reset_error_command =
                esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x0457, clear_error_code.size(), clear_error_code);
            delay(200);
            controller->queue_command(reset_error_command);
            ESP_LOGI("ModbusLambda", "Reset error code button pressed");
